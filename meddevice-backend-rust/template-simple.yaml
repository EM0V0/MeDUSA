AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Medical Device Backend - Rust Lambda Functions

# Global configuration
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: provided.al2
    Architectures:
      - x86_64
    Environment:
      Variables:
        RUST_LOG: info
        ENVIRONMENT: !Ref Environment
        USERS_TABLE: !Ref UsersTable
        DEVICES_TABLE: !Ref DevicesTable  
        PATIENTS_TABLE: !Ref PatientsTable
        REPORTS_TABLE: !Ref ReportsTable
        AUDIT_LOGS_TABLE: !Ref AuditLogsTable
        REPORTS_BUCKET: !Ref ReportsBucket
        DEVICE_DATA_BUCKET: !Ref DeviceDataBucket
        BACKUP_BUCKET: !Ref BackupBucket
        JWT_SECRET: !Ref JWTSecret
        JWT_EXPIRATION_HOURS: "24"

# Parameters
Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  JWTSecret:
    Type: String
    NoEcho: true
    Description: JWT secret key for token signing
    MinLength: 32
    Default: "default-jwt-secret-key-for-development-only-change-in-production"

# Resources
Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  PatientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-patients"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  DevicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-devices"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-reports"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  AuditLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-audit-logs"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  # S3 Buckets
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-meddevice-reports-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DeviceDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-meddevice-device-data-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-meddevice-backups-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-meddevice-auth"
      CodeUri: target/lambda/auth/
      Handler: bootstrap
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuditLogsTable
      Events:
        AuthRegister:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/register
            Method: POST
        AuthLogin:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/login
            Method: POST
        AuthLogout:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/logout
            Method: POST
        AuthRefresh:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/refresh
            Method: POST
        AuthChangePassword:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/change-password
            Method: POST
        AuthForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/forgot-password
            Method: POST
        AuthResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/reset-password
            Method: POST
        AuthMe:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/me
            Method: GET
        AuthVerifyToken:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/verify-token
            Method: POST

  # API Gateway
  MedDeviceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-meddevice-api"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Request-ID'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Request-ID'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              Access-Control-Max-Age: "'600'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Request-ID'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              Access-Control-Max-Age: "'600'"

# Outputs
Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${MedDeviceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  Environment:
    Description: Environment name
    Value: !Ref Environment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"