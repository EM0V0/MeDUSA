# AWS SAM template for the Medical Device Backend
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Medical Device Backend - Rust Lambda Functions

# Global configuration
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: provided.al2
    Architectures:
      - x86_64
    Environment:
      Variables:
        RUST_LOG: info
        ENVIRONMENT: !Ref Environment
        USERS_TABLE: !Ref UsersTable
        DEVICES_TABLE: !Ref DevicesTable  
        PATIENTS_TABLE: !Ref PatientsTable
        REPORTS_TABLE: !Ref ReportsTable
        AUDIT_LOGS_TABLE: !Ref AuditLogsTable
        REPORTS_BUCKET: !Ref ReportsBucket
        DEVICE_DATA_BUCKET: !Ref DeviceDataBucket
        BACKUP_BUCKET: !Ref BackupBucket
        JWT_SECRET: !Ref JWTSecret
        JWT_EXPIRATION_HOURS: "24"

# Parameters
Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  JWTSecret:
    Type: String
    NoEcho: true
    Description: JWT secret key for token signing
    MinLength: 32
  
  # Zero-trust architecture enhanced parameters
  EnableWAF:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable WAF protection for API Gateway
  
  EnableVPC:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"] 
    Description: Deploy Lambda functions in VPC for enhanced security
  
  AllowedOrigins:
    Type: CommaDelimitedList
    Default: "*"
    Description: Comma-separated list of allowed CORS origins (use * for development only)

# Conditions
Conditions:
  EnableWAFCondition: !Equals [!Ref EnableWAF, "true"]
  EnableVPCCondition: !Equals [!Ref EnableVPC, "true"]
  IsProduction: !Equals [!Ref Environment, "production"]

# Resources
Resources:
  # 零信任架构 - WAF Web ACL
  WebACL:
    Type: AWS::WAFv2::WebACL
    Condition: EnableWAFCondition
    Properties:
      Name: !Sub "${Environment}-meddevice-waf"
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      Rules:
        # 速率限制规则
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000  # 每5分钟2000请求
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
        
        # 地理位置限制（可选）
        - Name: GeoBlockRule
          Priority: 2
          Statement:
            GeoMatchStatement:
              CountryCodes:
                - CN  # 允许中国
                - US  # 允许美国
                - CA  # 允许加拿大
          Action:
            Allow: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: GeoBlockRule
        
        # SQL注入防护
        - Name: SQLInjectionRule
          Priority: 3
          Statement:
            SqliMatchStatement:
              FieldToMatch:
                Body: {}
              TextTransformations:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: SQLInjectionRule
        
        # XSS防护
        - Name: XSSRule
          Priority: 4
          Statement:
            XssMatchStatement:
              FieldToMatch:
                Body: {}
              TextTransformations:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: XSSRule
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${Environment}-meddevice-waf"

  # WAF关联到API Gateway
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Condition: EnableWAFCondition
    Properties:
      ResourceArn: !Sub "${MedDeviceApi}/stages/${Environment}"
      WebACLArn: !GetAtt WebACL.Arn

  # CloudWatch日志组 - API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${Environment}-meddevice"
      RetentionInDays: !If [IsProduction, 90, 7]
      KmsKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]

  # KMS密钥用于加密
  KMSKey:
    Type: AWS::KMS::Key
    Condition: IsProduction
    Properties:
      Description: !Sub "KMS Key for ${Environment} Medical Device Backend"
      KeyPolicy:
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsProduction
    Properties:
      AliasName: !Sub "alias/${Environment}-meddevice-key"
      TargetKeyId: !Ref KMSKey

  # VPC配置（零信任网络隔离）
  VPC:
    Type: AWS::EC2::VPC
    Condition: EnableVPCCondition
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-meddevice-vpc"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: EnableVPCCondition
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-meddevice-private-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: EnableVPCCondition
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-meddevice-private-2"

  # Lambda安全组
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: EnableVPCCondition
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP outbound

  # VPC Endpoints for AWS services
  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableVPCCondition
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableVPCCondition
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: EnableVPCCondition
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-meddevice-private-rt"

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: EnableVPCCondition
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: EnableVPCCondition
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # API Gateway
  MedDeviceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Forwarded-For'"
        AllowOrigin: !Sub 
          - "'${origins}'"
          - origins: !Join [",", !Ref AllowedOrigins]
      # 零信任架构 - 强制HTTPS
      EndpointConfiguration:
        Type: REGIONAL
      # 启用请求验证
      RequestValidators:
        RequestValidator:
          ValidateRequestBody: true
          ValidateRequestParameters: true
      # 启用访问日志
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '$requestId $ip $requestTime "$httpMethod $resourcePath $protocol" $status $responseLength $responseTime'
      # 启用X-Ray追踪
      TracingConfig:
        TracingEnabled: true
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
            Identity:
              Headers:
                - Authorization
      GatewayResponses:
        DEFAULT_4XX:
          ResponseTemplates:
            "application/json": '{"error": {"message": $context.error.messageString, "type": "CLIENT_ERROR"}}'
        DEFAULT_5XX:
          ResponseTemplates:
            "application/json": '{"error": {"message": $context.error.messageString, "type": "SERVER_ERROR"}}'

  # 死信队列用于失败的Lambda调用
  AuthDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-meddevice-auth-dlq"
      MessageRetentionPeriod: 1209600  # 14天
      KmsMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]

  PatientsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-meddevice-patients-dlq"
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]

  DevicesDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-meddevice-devices-dlq"
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]

  ReportsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-meddevice-reports-dlq"
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]

  AdminDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-meddevice-admin-dlq"
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/auth/
      Handler: bootstrap
      # 零信任架构 - VPC配置
      VpcConfig: !If
        - EnableVPCCondition
        - SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
        - !Ref "AWS::NoValue"
      # 启用X-Ray追踪
      Tracing: Active
      # 环境变量加密
      KmsKeyArn: !If [IsProduction, !GetAtt KMSKey.Arn, !Ref "AWS::NoValue"]
      # 增强监控
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AuthDLQ.Arn
      # 保留配置以防冷启动
      ReservedConcurrencyEnabled: !If [IsProduction, true, false]
      Events:
        AuthRegister:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/register
            Method: POST
            Auth:
              Authorizer: NONE
        AuthLogin:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE
        AuthLogout:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/logout
            Method: POST
        AuthRefresh:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/refresh
            Method: POST
            Auth:
              Authorizer: NONE
        AuthChangePassword:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/change-password
            Method: POST
        AuthForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/forgot-password
            Method: POST
            Auth:
              Authorizer: NONE
        AuthResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/reset-password
            Method: POST
            Auth:
              Authorizer: NONE
        AuthMe:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/me
            Method: GET
        AuthVerifyToken:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /auth/verify-token
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuditLogsTable

  PatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/patients/
      Handler: bootstrap
      Events:
        CreatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /patients
            Method: POST
        GetPatients:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /patients
            Method: GET
        GetPatient:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /patients/{patient_id}
            Method: GET
        UpdatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /patients/{patient_id}
            Method: PUT
        DeletePatient:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /patients/{patient_id}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuditLogsTable

  DevicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/devices/
      Handler: bootstrap
      Events:
        CreateDevice:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices
            Method: POST
        GetDevices:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices
            Method: GET
        GetDevice:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices/{device_id}
            Method: GET
        UpdateDevice:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices/{device_id}
            Method: PUT
        DeleteDevice:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices/{device_id}
            Method: DELETE
        CreateReading:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices/{device_id}/readings
            Method: POST
        GetReadings:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /devices/{device_id}/readings
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DevicesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuditLogsTable
        - S3CrudPolicy:
            BucketName: !Ref DeviceDataBucket

  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/reports/
      Handler: bootstrap
      Events:
        CreateReport:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /reports
            Method: POST
        GetReports:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /reports
            Method: GET
        GetReport:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /reports/{report_id}
            Method: GET
        DownloadReport:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /reports/{report_id}/download
            Method: GET
        DeleteReport:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /reports/{report_id}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DevicesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuditLogsTable
        - S3CrudPolicy:
            BucketName: !Ref ReportsBucket

  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/admin/
      Handler: bootstrap
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /admin/users
            Method: GET
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /admin/users
            Method: POST
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /admin/users/{user_id}
            Method: PUT
        DeactivateUser:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /admin/users/{user_id}/deactivate
            Method: POST
        GetAuditLogs:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /admin/audit-logs
            Method: GET
        GetSystemStats:
          Type: Api
          Properties:
            RestApiId: !Ref MedDeviceApi
            Path: /admin/stats
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DevicesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuditLogsTable
        - S3ReadPolicy:
            BucketName: !Ref ReportsBucket
        - S3ReadPolicy:
            BucketName: !Ref DeviceDataBucket
        - S3CrudPolicy:
            BucketName: !Ref BackupBucket

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-users"
      BillingMode: PAY_PER_REQUEST
      # 零信任架构 - KMS加密
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  PatientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-patients"
      BillingMode: PAY_PER_REQUEST
      # 零信任架构 - KMS加密
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: primary_doctor_id
          AttributeType: S
        - AttributeName: patient_number
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: primary-doctor-index
          KeySchema:
            - AttributeName: primary_doctor_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: patient-number-index
          KeySchema:
            - AttributeName: patient_number
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  DevicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-devices"
      BillingMode: PAY_PER_REQUEST
      # 零信任架构 - KMS加密
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: assigned_patient_id
          AttributeType: S
        - AttributeName: device_id
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: assigned-patient-index
          KeySchema:
            - AttributeName: assigned_patient_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: device-id-index
          KeySchema:
            - AttributeName: device_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-reports"
      BillingMode: PAY_PER_REQUEST
      # 零信任架构 - KMS加密
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: created_by
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: created-by-index
          KeySchema:
            - AttributeName: created_by
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  AuditLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-meddevice-audit-logs"
      BillingMode: PAY_PER_REQUEST
      # 零信任架构 - KMS加密
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !If [IsProduction, !Ref KMSKey, !Ref "AWS::NoValue"]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: user-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Buckets
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-meddevice-reports-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: 2555  # 7 years
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER

  DeviceDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-meddevice-device-data-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER

  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-meddevice-backups-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 2555  # 7 years
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 1
            StorageClass: GLACIER

# Outputs
Outputs:
  MedDeviceApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MedDeviceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${Environment}-MedDeviceApiUrl"
  
  UsersTableName:
    Description: "Users DynamoDB table name"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${Environment}-UsersTable"
  
  PatientsTableName:
    Description: "Patients DynamoDB table name"
    Value: !Ref PatientsTable
    Export:
      Name: !Sub "${Environment}-PatientsTable"
  
  DevicesTableName:
    Description: "Devices DynamoDB table name"  
    Value: !Ref DevicesTable
    Export:
      Name: !Sub "${Environment}-DevicesTable"
  
  ReportsTableName:
    Description: "Reports DynamoDB table name"
    Value: !Ref ReportsTable
    Export:
      Name: !Sub "${Environment}-ReportsTable"
  
  AuditLogsTableName:
    Description: "Audit Logs DynamoDB table name"
    Value: !Ref AuditLogsTable
    Export:
      Name: !Sub "${Environment}-AuditLogsTable"
  
  ReportsBucketName:
    Description: "Reports S3 bucket name"
    Value: !Ref ReportsBucket
    Export:
      Name: !Sub "${Environment}-ReportsBucket"
  
  DeviceDataBucketName:
    Description: "Device Data S3 bucket name"
    Value: !Ref DeviceDataBucket
    Export:
      Name: !Sub "${Environment}-DeviceDataBucket"
  
  BackupBucketName:
    Description: "Backup S3 bucket name"
    Value: !Ref BackupBucket
    Export:
      Name: !Sub "${Environment}-BackupBucket"
